name: Android CI

on:
  push:
    branches:
      - docker
  pull_request:
    branches:
      - docker

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    # container:
      # image: registry.gitlab.com/fdroid/docker-executable-fdroidserver:master
      # volumes:
       # - /mnt/repo:/repo
      #options: '--memory "16g"'
    env:
      ANDROID_COMPILE_SDK: 33
      ANDROID_BUILD_TOOLS: 33.0.2
      ANDROID_SDK_TOOLS: 9477386
      NDK_VERSION: 26.2.11394342
      APP: "org.mozilla.fennec_fdroid"

    steps:
#      - name: Free disk space
#        uses: jlumbroso/free-disk-space@main
#        with:
#          # this might remove tools that are actually needed,
#          # if set to "true" but frees about 6 GB
#          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
#          android: false
#          dotnet: true
#          haskell: true
#          large-packages: true
#          docker-images: true
#          swap-storage: false

#      - name: Maximize build space
#        uses: easimon/maximize-build-space@master
#        with:
#          root-reserve-mb: '9192'
#          remove-docker-images: 'true'
#          remove-codeql: 'true'
#          remove-haskell: 'true'
#          remove-android: 'false'
#          remove-dotnet: 'true'
          
      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '17'
      #     distribution: 'temurin'

      # - name: Install dependencies
      #   run: |
      #     sudo apt-get --quiet update --yes
      #     sudo apt-get --quiet install --yes mercurial wget unzip git cmake make m4 g++ pkg-config libssl-dev python3 python-is-python3 python3-distutils python3-venv tcl gyp ninja-build bzip2 libz-dev libffi-dev libsqlite3-dev
      #     sudo apt-get --quiet install --yes patch autoconf libtool pkg-config ant
      #     sudo apt-get autoremove --purge
      #     sudo apt-get clean
      #     sudo rm -rf /var/lib/apt/lists/*

      # - name: Setup Android SDK
      #   uses: android-actions/setup-android@v3
      #   with:
      #     packages: >
      #       platforms;android-${{ env.ANDROID_COMPILE_SDK }}
      #       platform-tools
      #       build-tools;${{ env.ANDROID_BUILD_TOOLS }}
      #       ndk;${{ env.NDK_VERSION }}
            
      - name: Print env
        run: |
          env
          echo "*******************"
          pwd
          echo "--------------------"
          df -h
          echo "====================="
          id

      - name: Remove all JDK
        run: |
          sudo apt-get remove -y --purge *-jdk openjdk-*

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
           java-version: '17'
           distribution: 'oracle'

      - name: Install dependencies
        run: |
          sudo apt-get --quiet update --yes
          sudo apt-get --quiet install --yes git
          sudo apt-get autoremove --purge
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: >
            platforms;android-${{ env.ANDROID_COMPILE_SDK }}
            platform-tools
            build-tools;${{ env.ANDROID_BUILD_TOOLS }}
            ndk;${{ env.NDK_VERSION }}

      - name: Configure docker
        run: |
          sudo systemctl stop docker
          sudo ls -la /etc/docker/
          sudo cat /etc/docker/daemon.json
          sudo id
          sudo sed -i "s/}/, \"data-root\": \"\/mnt\/docker\"}/" /etc/docker/daemon.json
          #sudo echo '{"data-root": "/mnt/docker"}' > /etc/docker/daemon.json
          sudo systemctl start docker

      - name: Run
        run: |
          sudo mkdir -p /mnt/fdroidserver
          sudo mkdir -p /mnt/fdroiddata
          sudo chown $(id -u):$(id -g) /mnt/fdroidserver
          sudo chown $(id -u):$(id -g) /mnt/fdroiddata
          git clone https://gitlab.com/fdroid/fdroidserver.git /mnt/fdroidserver
          git clone https://gitlab.com/fdroid/fdroiddata.git /mnt/fdroiddata
          sed -i "s/if onserver:/if not onserver:/" /mnt/fdroidserver/fdroidserver/build.py
          sed -i "s/p = FDroidPopen(\['sudo', 'SUDO_FORCE.*'\])/p = FDroidPopen(\['echo', '1'\])/" /mnt/fdroidserver/fdroidserver/build.py
          sudo chown -R 1000:1000 /mnt/fdroidserver
          sudo chown -R 1000:1000 /mnt/fdroiddata
          sudo fallocate -l 6G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo free -th
          docker pull registry.gitlab.com/fdroid/docker-executable-fdroidserver:master
          echo ".........................."
          sudo df -h /
          (while true; do df -h; sleep 60; done) &
          #docker run --rm -u 1000:1000 -v $ANDROID_HOME:/opt/android-sdk -v /mnt/fdroiddata:/repo -v /mnt/fdroidserver:/home/vagrant/fdroidserver -e ANDROID_HOME:/opt/android-sdk registry.gitlab.com/fdroid/docker-executable-fdroidserver:master build --verbose --latest org.mozilla.fennec_fdroid
          docker run -d --name test --rm -u 1000:1000 --entrypoint /bin/bash -v $ANDROID_HOME:/opt/android-sdk -v /mnt/fdroiddata:/repo -v /mnt/fdroidserver:/home/vagrant/fdroidserver -e ANDROID_HOME:/opt/android-sdk registry.gitlab.com/fdroid/docker-executable-fdroidserver:master -c sleep 60
          docker inspect test
          #docker run --rm -u 1000:1000 --entrypoint /usr/bin/cat -v $ANDROID_HOME:/opt/android-sdk -v /mnt/fdroiddata:/repo -v /mnt/fdroidserver:/home/vagrant/fdroidserver -e ANDROID_HOME:/opt/android-sdk registry.gitlab.com/fdroid/docker-executable-fdroidserver:master /etc/passwd
          #docker run --rm -u 1000:1000 --entrypoint /bin/bash -v $ANDROID_HOME:/opt/android-sdk -v /mnt/fdroiddata:/repo -v /mnt/fdroidserver:/home/vagrant/fdroidserver -e ANDROID_HOME:/opt/android-sdk registry.gitlab.com/fdroid/docker-executable-fdroidserver:master -c "sudo bash -c 'echo 1'"
          #docker run --rm --entrypoint /bin/bash -v $ANDROID_HOME:/opt/android-sdk -v /mnt/fdroiddata:/repo -v /mnt/fdroidserver:/home/vagrant/fdroidserver -e ANDROID_HOME:/opt/android-sdk registry.gitlab.com/fdroid/docker-executable-fdroidserver:master -c id
          #docker run --rm --entrypoint /bin/bash -v $ANDROID_HOME:/opt/android-sdk -v /mnt/fdroiddata:/repo -v /mnt/fdroidserver:/home/vagrant/fdroidserver -e ANDROID_HOME:/opt/android-sdk registry.gitlab.com/fdroid/docker-executable-fdroidserver:master -c cat /etc/passwd


      # - name: Clone fdroiddata and build
      #   run: |
      #     . /etc/profile.d/bsenv.sh
      #     ls -la /
      #     sudo fallocate -l 6G /repo/swapfile
      #     sudo chmod 600 /repo/swapfile
      #     sudo mkswap /repo/swapfile
      #     sudo swapon /repo/swapfile
      #     sudo free -th
      #     export DEBIAN_FRONTEND=noninteractive
      #     # export PYTHONPATH=$fdroidserver:$fdroidserver/examples
      #     # export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/
      #     git clone --depth 1 https://gitlab.com/fdroid/fdroiddata.git /repo/fdroiddata
      #     # mkdir -p ~/.gradle && echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
      #     # echo "org.gradle.jvmargs=-Xmx8G -Dkotlin.daemon.jvm.options=-Xmx4G -XX:+HeapDumpOnOutOfMemoryError -XX:+UseParallelGC -Dfile.encoding=UTF-8p" >> $HOME/.gradle/gradle.properties
      #     echo "y" | sdkmanager "platforms;android-${{ env.ANDROID_COMPILE_SDK }}" "platform-tools" "build-tools;${{ env.ANDROID_BUILD_TOOLS }}" "ndk;${{ env.NDK_VERSION }}"
      #     # sudo apt update
      #     # sudo apt install -y openjdk-17-jdk python3-pip
      #     sed -i "s/if onserver:/if not onserver:/" ${fdroidserver}/fdroidserver/build.py
      #     sed -i "s/p = FDroidPopen(\['sudo', 'SUDO_FORCE.*'\])/p = FDroidPopen(\['echo', '1'\])/" ${fdroidserver}/fdroidserver/build.py
      #     cd /repo/fdroiddata
      #     # ${fdroidserver}/fdroid fetchsrclibs --verbose ${{ env.APP }}
      #     ${fdroidserver}/fdroid build --verbose --latest ${{ env.APP }}

      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build-outputs
      #     path: build/fenix/app/build/outputs/
