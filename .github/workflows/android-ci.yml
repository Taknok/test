name: Android CI

on:
  push:
    branches:
      - docker
  pull_request:
    branches:
      - docker

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    container:
      image: registry.gitlab.com/fdroid/docker-executable-fdroidserver:master
      volumes:
       - /mnt/repo:/repo
      options: '--memory "12g"'
    env:
      ANDROID_COMPILE_SDK: 33
      ANDROID_BUILD_TOOLS: 33.0.2
      ANDROID_SDK_TOOLS: 9477386
      NDK_VERSION: 26.2.11394342
      APP: "org.mozilla.fennec_fdroid:1290220"

    steps:
#      - name: Free disk space
#        uses: jlumbroso/free-disk-space@main
#        with:
#          # this might remove tools that are actually needed,
#          # if set to "true" but frees about 6 GB
#          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
#          android: false
#          dotnet: true
#          haskell: true
#          large-packages: true
#          docker-images: true
#          swap-storage: false

#      - name: Maximize build space
#        uses: easimon/maximize-build-space@master
#        with:
#          root-reserve-mb: '9192'
#          remove-docker-images: 'true'
#          remove-codeql: 'true'
#          remove-haskell: 'true'
#          remove-android: 'false'
#          remove-dotnet: 'true'
          
      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '17'
      #     distribution: 'temurin'

      # - name: Install dependencies
      #   run: |
      #     sudo apt-get --quiet update --yes
      #     sudo apt-get --quiet install --yes mercurial wget unzip git cmake make m4 g++ pkg-config libssl-dev python3 python-is-python3 python3-distutils python3-venv tcl gyp ninja-build bzip2 libz-dev libffi-dev libsqlite3-dev
      #     sudo apt-get --quiet install --yes patch autoconf libtool pkg-config ant
      #     sudo apt-get autoremove --purge
      #     sudo apt-get clean
      #     sudo rm -rf /var/lib/apt/lists/*

      # - name: Setup Android SDK
      #   uses: android-actions/setup-android@v3
      #   with:
      #     packages: >
      #       platforms;android-${{ env.ANDROID_COMPILE_SDK }}
      #       platform-tools
      #       build-tools;${{ env.ANDROID_BUILD_TOOLS }}
      #       ndk;${{ env.NDK_VERSION }}
            
      - name: Print env
        run: |
          env
          echo "*******************"
          pwd
          echo "--------------------"
          df -h

      - name: Clone fdroiddata and build
        run: |
          . /etc/profile.d/bsenv.sh
          export DEBIAN_FRONTEND=noninteractive
          export PYTHONPATH=$fdroidserver:$fdroidserver/examples
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/
          git clone --depth 1 https://gitlab.com/fdroid/fdroiddata.git /repo
          mkdir -p ~/.gradle && echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
          echo "org.gradle.jvmargs=-Xmx8G -Dkotlin.daemon.jvm.options=-Xmx4G -XX:+HeapDumpOnOutOfMemoryError -XX:+UseParallelGC -Dfile.encoding=UTF-8p" >> $HOME/.gradle/gradle.properties
          sudo apt update
          sudo apt install -y openjdk-17-jdk
          cd /repo
          ${fdroidserver}/fdroid fetchsrclibs --verbose ${{ env.APP }}
          cd build/srclib/MozFennec
          ./mach --no-interactive bootstrap --application-choice="GeckoView/Firefox for Android Artifact Mode"
          cd /repo
          ${fdroidserver}/fdroid build --on-server --verbose --no-tarball -s ${{ env.APP }}

      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build-outputs
      #     path: build/fenix/app/build/outputs/
