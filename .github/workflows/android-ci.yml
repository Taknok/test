name: Android CI

on:
  push:
    branches:
      - main3
  pull_request:
    branches:
      - main3

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_COMPILE_SDK: 33
      ANDROID_BUILD_TOOLS: 33.0.2
      ANDROID_SDK_TOOLS: 9477386
      NDK_VERSION: 26.2.11394342
      ANDROID_HOME: "$HOME/.mozbuild/android-sdk-linux"
      LARGE_DIR: "/mnt/runner"

    steps:
#      - name: Free disk space
#        uses: jlumbroso/free-disk-space@main
#        with:
#          # this might remove tools that are actually needed,
#          # if set to "true" but frees about 6 GB
#          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
#          android: false
#          dotnet: true
#          haskell: true
#          large-packages: true
#          docker-images: true
#          swap-storage: false

#      - name: Maximize build space
#        uses: easimon/maximize-build-space@master
#        with:
#          root-reserve-mb: '9192'
#          remove-docker-images: 'true'
#          remove-codeql: 'true'
#          remove-haskell: 'true'
#          remove-android: 'false'
#          remove-dotnet: 'true'
          
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'

      - name: Install dependencies
        run: |
          sudo apt-get --quiet update --yes
          sudo apt-get --quiet install --yes mercurial
          sudo apt-get autoremove --purge
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

#      - name: Setup Android SDK
#        uses: android-actions/setup-android@v3
#        with:
#          packages: >
#            platforms;android-${{ env.ANDROID_COMPILE_SDK }}
#            platform-tools
#            build-tools;${{ env.ANDROID_BUILD_TOOLS }}
#            ndk;${{ env.NDK_VERSION }}
            
      - name: Print env
        run: |
          env
          echo "*******************"
          pwd
          echo "--------------------"
          df -h

      - name: Create working directory
        run: |
          sudo mkdir -p $LARGE_DIR
          sudo chown $(id -u) $LARGE_DIR

      - name: Clone Mozilla source
        working-directory: ${{env.LARGE_DIR}}
        run: |
          hg clone --ssh /bin/false -- https://hg.mozilla.org/releases/mozilla-release MozFennec
          
      - name: Checking out to branch
        working-directory: ${{env.LARGE_DIR}}/MozFennec
        run: |
          hg update -C -- FIREFOX_127_0_2_RELEASE

      - name: Bootstrap
        working-directory: ${{env.LARGE_DIR}}/MozFennec
        run: |
          ./mach --no-interactive bootstrap --application-choice="GeckoView/Firefox for Android Artifact Mode"
          ls -la $HOME/.mozbuild/jdk/

      - name: Set JAVA_HOME
        run: |
          JAVA_HOME=$(realpath $HOME/.mozbuild/jdk/jdk-* | head -1)
          echo $JAVA_HOME
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV

      - name: Configure Gradle
        run: |
          mkdir -p $HOME/.gradle
          echo "org.gradle.daemon=false" > $HOME/.gradle/gradle.properties
          echo "org.gradle.jvmargs=-Xmx8G -Dkotlin.daemon.jvm.options=-Xmx4G -XX:+HeapDumpOnOutOfMemoryError -XX:+UseParallelGC -Dfile.encoding=UTF-8p" >> $HOME/.gradle/gradle.properties

      - name: Build
        working-directory: ${{env.LARGE_DIR}}/MozFennec
        run: |
          ./mach build

      - name: Build app
        working-directory: ${{env.LARGE_DIR}}/MozFennec/mobile/android/fenix
        run: |
          ./gradlew app:assembleRelease

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-outputs
          path: ${{env.LARGE_DIR}}/MozFennec/mobile/android/fenix/app/build/outputs/apk/fenix/
